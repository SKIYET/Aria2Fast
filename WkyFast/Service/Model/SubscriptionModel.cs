// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var subscriptionModel = SubscriptionModel.FromJson(jsonString);

namespace WkyFast.Service.Model.SubscriptionModel
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SubscriptionModel : BaseNotificationModel
    {
        [JsonProperty("Url")]
        public string Url { get; set; }

        [JsonProperty("Path")]
        public string Path { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Filter")]
        public string Filter { get; set; }

        [JsonProperty("IsFilterRegex")]
        public bool IsFilterRegex { get; set; }

        [JsonProperty("AlreadyAddedDownloadModel")]
        public ObservableCollection<SubscriptionSubTaskModel> AlreadyAddedDownloadModel { get; set; }
    }

    public partial class SubscriptionSubTaskModel : BaseNotificationModel
    {
        [JsonProperty("Url")]
        public string Url { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }
    }

    public partial class SubscriptionModel
    {
        public static SubscriptionModel[] FromJson(string json) => JsonConvert.DeserializeObject<SubscriptionModel[]>(json, WkyFast.Service.Model.SubscriptionModel.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SubscriptionModel[] self) => JsonConvert.SerializeObject(self, WkyFast.Service.Model.SubscriptionModel.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
